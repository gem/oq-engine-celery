sudo: required

language: python

python:
 - "2.7"
 - "3.5"

services:
 - rabbitmq

cache:
  pip: true
  directories:
  - wheels27
  - wheels35

env:
  - OQ_DISTRIBUTE=celery

jobs:
  include:
  - stage: tests
    script:
        - nosetests --with-doctest -xvs -a'!slow' openquake.engine
        - nosetests --with-doctest -xvs -a'!slow' openquake.server
        - nosetests --with-doctest -xvs -a'!slow' openquake.calculators
        - nosetests --with-doctest -xvs -a'!slow' openquake.risklib
        - nosetests --with-doctest -xvs -a'!slow' openquake.commonlib
        - nosetests --with-doctest -xvs -a'!slow' openquake.commands
  - stage: demos
    script:
        - time bin/run-demos.sh $TRAVIS_BUILD_DIR/oq-engine/demos
        - bin/check_demos

before_install:
  - if [ "$TRAVIS_PULL_REQUEST_BRANCH" != "" ]; then BRANCH=$TRAVIS_PULL_REQUEST_BRANCH; else BRANCH=$TRAVIS_BRANCH; fi

install:
  # pip do not cache data when requirements includes full http URLs, so we need to download
  # the wheels first, put the folder in cache and then install the wheels from there.
  # A second run of 'pip download' will download only the missing wheels. 
  - if [ "$(git ls-remote --heads https://github.com/gem/oq-engine.git ${BRANCH})" == "" ]; then BRANCH='master'; fi; git clone -b ${BRANCH} --depth=1 https://github.com/gem/oq-engine.git && echo "Running on oq-engine/${BRANCH}"
  - if [[ $TRAVIS_PYTHON_VERSION == 2.7 ]]; then pip -q download -r oq-engine/requirements-py27-linux64.txt -d wheels27 && pip -q install wheels27/*; fi
  - if [[ $TRAVIS_PYTHON_VERSION == 3.5 ]]; then pip -q download -r oq-engine/requirements-py35-linux64.txt -d wheels35 && pip -q install wheels35/*; fi
  - pip -q install -e oq-engine
  # Setup RabbitMQ user and hosts
  - sudo rabbitmqctl add_user openquake openquake
  - sudo rabbitmqctl add_vhost openquake
  - sudo rabbitmqctl set_permissions -p openquake openquake ".*" ".*" ".*"
  - sed -i 's/oq_distribute = futures/oq_distribute = celery/g' oq-engine/openquake/engine/openquake.cfg

before_script:
  - mkdir ~/oqdata
  - cd oq-engine
  - python -c'import platform; print(platform.platform()); import multiprocessing; print("#CPUs=%d" % multiprocessing.cpu_count())'
  - celery worker --purge -Ofair --config openquake.engine.celeryconfig &
  - python utils/celery-status
